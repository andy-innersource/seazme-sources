;; All config is by convention
;; Different types of configuration reside on the same level
;; Not all combinations are valid
;; Not all fields are always required
{
 ;;Context
 :context-hbase         {
                         :kind "hbase"
                         :prefix "test"
                         }

 :context-demo-twiki      {
                         :kind "twiki"
                         :index "demo-twiki" ; needed by reinit and direct ES
                         :instance "DEMO"
                         :base-url "https://.../wiki"
                                        ;apiurl vs deeplink url
                         :app-id "" ; datahub
                         }
 :context-demo-confluence {
                         :kind "confluence"
                         :index "demo-conf"
                         :instance "DEMO"
                         :base-url "https://*/confluence"
                         :app-id ""
                         }
:context-demo-jira       {
                         :kind "jira"
                         :index "demo-jira"
                         :instance "DEMO"
                         :app-id ""
                         }
 :context-demo-snow       {
                         :kind "snow"
                         :index "demo-snow"
                         :instance "DEMO"
                         :app-id ""
                         }

 ;;Sources
 ;;-Twiki (must be run on the same FS)
 :twiki-demo-prod {
                 :kind "twiki"
                 :path "db/twiki"
                 }

 ;;-ElasticSearch
 :elasticsearch-prod {
                      :kind "elasticsearch"
                      :host "http://*"
                      :basic-auth ["*" "*"]
                      }

 :elasticsearch-local {
                       :kind "elasticsearch"
                       :host "http://127.0.0.1:9200"
                       :basic-auth ["" ""]
                       }

 ;;-Cache
 :confluence-demo-cache {
                       :kind "cache"
                       :path "db/conf"
                       }

 ;;-Confluence
 :confluence-demo1-prod {
                      :kind "confluence"
                      :url "https://*.com/confluence"
                      :basic-auth ["*" "*"]
                      }
 :confluence-demo2-prod {
                      :kind "confluence"
                      :url "*"
                      :api-cookie "*"
                      }

 ;;-DataHub
 :datahub-prod {
                :kind "datahub"
                :host "https://*"
                :basic-auth ["*" "*"]
                }

 ;;-JIRA
 :jira-prod {
             :kind "jira"
             :credentials ["*" "*"]
             :cache true
             :url "https://*/jira/rest"
             }

 ;;-SNOW
 :snow-prod {
             :kind "snow"
             :basic-auth ["*" "*"]
             }
 ;;-Hadoop (currently one hardcoded backend is supported)
 :hbase {
         :kind "hbase"
         :configuration {
                         "hbase.client.retries.number" "1"
                         "hbase.client.scanner.timeout.period" "1800000"
                         "zookeeper.session.timeout" "1000"
                         "zookeeper.recovery.retry" "1"
                         "hbase.zookeeper.property.clientPort" "2181"
                         "hbase.zookeeper.quorum" "<comma delimited hosts list>"
                         "hadoop.security.authentication" "kerberos"
                         "hbase.security.authentication" "kerberos"
                         "hbase.master.kerberos.principal" "hbase/_HOST@<host>"
                         "hbase.regionserver.kerberos.principal" "hbase/_HOST@<host>"
                         "zookeeper.znode.parent" "/hbase-secure"
                         }
         :kerberos {
                    :user "<username>@<host>.COM" :path "username.keytab"
                    }
         }
 }
